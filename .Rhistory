wm_record("157258")
wm_record(157258)
dictyocha<-wm_records_name("Dictyocha")
View(dictyocha)
wm_record(157258) -> test
View(test)
package_list<-c("taxize", #NOTE WITH TAXIZE: get_wormsid and similar functions that retrieve from WoRMS using scientific name search marine taxa only UNLESS you install the development version
"worrms",
"tidyr",
"dplyr",
"tibble")
#install.packages("taxize") #install packages as necessary
#install.packages("tidyr") # "
#install.packages("dplyr") # "
#install.packages("tibble") # "
for (i in package_list) {
library(i, character.only = TRUE)
}
setwd("C:/Users/Dale/Desktop") #wherever the csv is saved
initial<-read.csv("Mariana_2010_pumps_WORKING-COPY - larval_counts.csv") #csv name
initial_cleaning<-initial #create a duplicate of initial called initial_df so that if I screw something up later, I still have the original df untouched
#save various columns as class character
columns<-colnames(initial_cleaning) #make list of column names to check which ones should be characters
char_cols<-columns[1:9] #columns 1 thru 9 contain character inputs; rest are totals
for (i in 1:length(char_cols)){ #convert columns that should be characters to class "character"
initial_cleaning[,i]<-as.character(initial_cleaning[,i])
}
##add column to hold AphiaID
initial_cleaning<-add_column(initial_cleaning,AphiaID="",.after="Group")
##add column to hold taxon rank check
initial_cleaning<-add_column(initial_cleaning,taxonRank_AphiaID_match="",.after="taxonRank")
##finding AphiaID from column scientificName
for (i in 1:length(initial_cleaning$scientificName)) {
initial_cleaning$AphiaID[i]<-wm_name2id(initial_cleaning$scientificName[i])
}
#make AphiaID numeric, for later calls
initial_cleaning$AphiaID<-as.numeric(initial_cleaning$AphiaID)
#check if AphiaID/scientificName match given taxon
##initial run: lots of FALSEes b/c upper/lowercase mismatch; worms all lowercase; changing taxonRank to all lower
initial_cleaning$taxonRank<-tolower(initial_cleaning$taxonRank)
##for each value in taxonRank, see if equal to the rank of the AphiaID; place this true/false as value for taxonRank_AphiaID_match column
for (i in 1:length(initial_cleaning$scientificName)) {
initial_cleaning$taxonRank_AphiaID_match[i]<-isTRUE(initial_cleaning$taxonRank[i] == as.character(tax_rank(initial_cleaning$AphiaID[i], db="worms")))
}
install.packages("remotes")
install.packages("remotes")
remotes::install_github("ropensci/taxize")
?get_wormsid
package_list<-c(#"taxize", #NOTE WITH TAXIZE: get_wormsid and similar functions that retrieve from WoRMS using scientific name search marine taxa only UNLESS you install the development version
"worrms",
"tidyr",
"dplyr",
"tibble")
#install.packages("taxize") #install packages as necessary
#install.packages("tidyr") # "
#install.packages("dplyr") # "
#install.packages("tibble") # "
for (i in package_list) {
library(i, character.only = TRUE)
}
#development version of taxize
install.packages("remotes")
remotes::install_github("ropensci/taxize")
setwd("C:/Users/Dale/Desktop") #wherever the csv is saved
initial<-read.csv("Mariana_2010_pumps_WORKING-COPY - larval_counts.csv") #csv name
initial_cleaning<-initial #create a duplicate of initial called initial_df so that if I screw something up later, I still have the original df untouched
#save various columns as class character
columns<-colnames(initial_cleaning) #make list of column names to check which ones should be characters
char_cols<-columns[1:9] #columns 1 thru 9 contain character inputs; rest are totals
for (i in 1:length(char_cols)){ #convert columns that should be characters to class "character"
initial_cleaning[,i]<-as.character(initial_cleaning[,i])
}
##add column to hold AphiaID
initial_cleaning<-add_column(initial_cleaning,AphiaID="",.after="Group")
##add column to hold taxon rank check
initial_cleaning<-add_column(initial_cleaning,taxonRank_AphiaID_match="",.after="taxonRank")
##finding AphiaID from column scientificName
for (i in 1:length(initial_cleaning$scientificName)) {
initial_cleaning$AphiaID[i]<-wm_name2id(initial_cleaning$scientificName[i])
}
#make AphiaID numeric, for later calls
initial_cleaning$AphiaID<-as.numeric(initial_cleaning$AphiaID)
#check if AphiaID/scientificName match given taxon
##initial run: lots of FALSEes b/c upper/lowercase mismatch; worms all lowercase; changing taxonRank to all lower
initial_cleaning$taxonRank<-tolower(initial_cleaning$taxonRank)
##for each value in taxonRank, see if equal to the rank of the AphiaID; place this true/false as value for taxonRank_AphiaID_match column
for (i in 1:length(initial_cleaning$scientificName)) {
initial_cleaning$taxonRank_AphiaID_match[i]<-isTRUE(initial_cleaning$taxonRank[i] == as.character(tax_rank(initial_cleaning$AphiaID[i], db="worms")))
}
#get phylum from AphiaID, for manual validation
##add column to hold phylum
initial_cleaning<-add_column(initial_cleaning,Phylum="",.before="scientificName")
##
for (i in 1:length(initial_cleaning$AphiaID)){
tree<-classification(initial_cleaning$AphiaID[i], db='worms') #get taxonomic stuff from WoRMS based on AphiaID
df_tree<-as.data.frame(tree[[1]]) #take just the name/rank/id portion, as a df, from classification() output
if (length(df_tree$name[(which(df_tree$rank=="Phylum"))])==0) { #some are only to Animalia, and so have no value for Phylum in the output from classification(); put "NA" here. This if/else helps prevent the for loop from throwing an error and stopping when it encounters a classification() output that has no phylum
initial_cleaning$Phylum[i]<-"NA"
#paste(c("error row:",i," AphiaID:",initial_cleaning$AphiaID[i]), sep="")
}
else
initial_cleaning$Phylum[i]<-df_tree$name[which(df_tree$rank == "Phylum")] #set name of the phylum to initial_cleaning$Phylum value
}
#using LSID as scientificNameID
#LSID is just a consistent 'preamble' URI, plus AphiaID
for (i in 1:length(initial_cleaning$AphiaID)) {
initial_cleaning$scientificNameID[i]<-paste("urn:lsid:marinespecies.org:taxname:",initial_cleaning$AphiaID[i],sep="")
}
#initial_cleaning_2<-initial_cleaning #another backup incase of mistakes
#initial_cleaning<-initial_cleaning_2 #load backup
#check column names, to see names of which we'd like to keep/drop
#colnames(initial_cleaning)
#remove undesired names
initial_cleaning<-initial_cleaning[,-c(1)] #subset initial_cleaning without undesired columns; just removing "Group" column
#rename some (but not all!) of the non-DarwinCore-compliant column names
initial_cleaning <- initial_cleaning %>%
rename(
associatedSequences = Specimen.ID.for.those.with.genetic.sequences, #specimenID =/= associated sequence, but presumably a link to the associated sequence can be gotten pretty easily from the specimen ID
associatedMedia = Photograph.for.those.without.genetic.seq..bc.photo.submitted.with.genetic.seq., #photo name, needs static reference
identificationRemarks = Genetic.Notes, #probably the closest fit of catagory names for notes on genetic match
X1.Snail.total = X1.Total, #just to make it clearer which total this refers to
X2.Snail.total = X2.Total, #also to make it clearer
X3.Archean.total = X3.Total,
X4.Archean.total = X4.Total,
X5.Urashima.total = X5.Total,
X6.Urashima.total = X6.Total
)
#create occurrence columns, 1 for each Snail site; can condense into 1, but for now keep separate
obs_table<-add_column(initial_cleaning,	occurrenceStatus_X1.Snail="",occurrenceStatus_X2.Snail="",occurrenceStatus_Snail="",occurrenceStatus_X3.Archean="",occurrenceStatus_X4.Archean="",occurrenceStatus_Archean="",occurrenceStatus_X5.Urashima="",occurrenceStatus_X6.Urashima="",occurrenceStatus_Urashima="",occurenceStatus_overall="",.after="identificationRemarks")
#fill in presence/absence based on totals column>0 or counts column presence/absence/NA
##separate for loops for moorings 1 and 2, just for clarity/simplicity
##data is such that either the "total" column has a value and counts columns lack the letters p/a/n, OR the "total" column is NA and counts columns have p, a, or n
#presence/absence for mooring 1 at Snail Vent
for (i in 1:length(obs_table$scientificName)) {
obsStatus<-paste(obs_table$X1.Snail.300[i],obs_table$X1.Snail.63[i],obs_table$X1.Snail.ship[i],sep="") #create a value to hold all the entries for individual counts (aka step 1 for dealing with columns with a mix of character and numeric values)
if (isTRUE(grepl("p", obsStatus))==TRUE) { #if the compilation of counts for the site contains the letter p, occurrence= "present"
obs_table$occurrenceStatus_X1.Snail[i]<-"present" #set occurrence at Snail 1 to "present" if "p" anywhere in that row's
} else if (isTRUE(as.numeric(obs_table$X1.Snail.total[i])>0) ==TRUE) { #if "p" is not in the counts columns, but the total is >0
obs_table$occurrenceStatus_X1.Snail[i]<-"present" #set occurrence at Snail 1 to "present"
} else
obs_table$occurrenceStatus_X1.Snail[i]<- "absent" #for all others (no 'p' in counts, and total is not >0), mark as absent
}
#presence/absence for mooring 2 at Snail Vent
for (i in 1:length(obs_table$scientificName)) {
obsStatus<-paste(obs_table$X2.Snail.300[i],obs_table$X2.Snail.63[i],obs_table$X2.Snail.ship[i],sep="")
if (isTRUE(grepl("p", obsStatus))==TRUE) {
obs_table$occurrenceStatus_X2.Snail[i]<-"present"
} else if (isTRUE(as.numeric(obs_table$X2.Snail.total[i])>0) ==TRUE) {
obs_table$occurrenceStatus_X2.Snail[i]<-"present"
} else
obs_table$occurrenceStatus_X2.Snail[i]<- "absent"
}
#overall at Snail vent
for (i in 1:length(obs_table$scientificName)) {
if (isTRUE(obs_table$occurrenceStatus_X1.Snail[i] == "absent" && obs_table$occurrenceStatus_X2.Snail[i] == "absent") == TRUE) { #if both moorings at snail are "absent" for the row,
obs_table$occurrenceStatus_Snail[i]<-"absent" #make snail vent "absent"
} else
obs_table$occurrenceStatus_Snail[i] <- "present" #otherwise (present/absent or present/present) make overall snail vent "present"
}
#presence/absence for mooring 3 at Archean
for (i in 1:length(obs_table$scientificName)) {
obsStatus<-paste(obs_table$X3.Archean.300[i],obs_table$X3.Archean.63[i],obs_table$X3.Archean.ship[i],sep="")
if (isTRUE(grepl("p", obsStatus))==TRUE) {
obs_table$occurrenceStatus_X3.Archean[i]<-"present"
} else if (isTRUE(as.numeric(obs_table$X3.Archean.total[i])>0) ==TRUE) {
obs_table$occurrenceStatus_X3.Archean[i]<-"present"
} else
obs_table$occurrenceStatus_X3.Archean[i]<- "absent"
}
#presence/absence for mooring 4 at Archean
for (i in 1:length(obs_table$scientificName)) {
obsStatus<-paste(obs_table$X4.Archean.300[i],obs_table$X4.Archean.63[i],obs_table$X4.Archean.ship[i],sep="")
if (isTRUE(grepl("p", obsStatus))==TRUE) {
obs_table$occurrenceStatus_X4.Archean[i]<-"present"
} else if (isTRUE(as.numeric(obs_table$X4.Archean.total[i])>0) ==TRUE) {
obs_table$occurrenceStatus_X4.Archean[i]<-"present"
} else
obs_table$occurrenceStatus_X4.Archean[i]<- "absent"
}
#overall at Archean (if present/present or absent/absent, look for "present")
for (i in 1:length(obs_table$scientificName)) {
if (isTRUE(obs_table$occurrenceStatus_X3.Archean[i] == "absent" && obs_table$occurrenceStatus_X4.Archean[i] == "absent") == TRUE) {
obs_table$occurrenceStatus_Archean[i]<-"absent"
} else
obs_table$occurrenceStatus_Archean[i] <- "present" #otherwise (present/absent) is "present" in overall column
}
#presence/absence for mooring 3 at Urashima
for (i in 1:length(obs_table$scientificName)) {
obsStatus<-paste(obs_table$X5.Urashima.300[i],obs_table$X5.Urashima.63[i],obs_table$X5.Urashima.ship[i],sep="")
if (isTRUE(grepl("p", obsStatus))==TRUE) {
obs_table$occurrenceStatus_X5.Urashima[i]<-"present"
} else if (isTRUE(as.numeric(obs_table$X5.Urashima.total[i])>0) ==TRUE) {
obs_table$occurrenceStatus_X5.Urashima[i]<-"present"
} else
obs_table$occurrenceStatus_X5.Urashima[i]<- "absent"
}
#presence/absence for mooring 4 at Urashima
for (i in 1:length(obs_table$scientificName)) {
obsStatus<-paste(obs_table$X6.Urashima.300[i],obs_table$X6.Urashima.63[i],obs_table$X6.Urashima.ship[i],sep="")
if (isTRUE(grepl("p", obsStatus))==TRUE) {
obs_table$occurrenceStatus_X6.Urashima[i]<-"present"
} else if (isTRUE(as.numeric(obs_table$X6.Urashima.total[i])>0) ==TRUE) {
obs_table$occurrenceStatus_X6.Urashima[i]<-"present"
} else
obs_table$occurrenceStatus_X6.Urashima[i]<- "absent"
}
#overall at Urashima (if present/present or absent/absent, look for "present")
for (i in 1:length(obs_table$scientificName)) {
if (isTRUE(obs_table$occurrenceStatus_X5.Urashima[i] == "absent" && obs_table$occurrenceStatus_X6.Urashima[i] == "absent") == TRUE) {
obs_table$occurrenceStatus_Urashima[i]<-"absent"
} else
obs_table$occurrenceStatus_Urashima[i] <- "present" #otherwise (present/absent) is "present" in overall column
}
#if any of the site columns are present, make overall present; otherwise, make absent
##originall, was if all are abesnt, make absent, otherwise, make present; this version accounts for blanks, making overall absent if there's an absent or two and a blank or two
for (i in 1:length(obs_table$scientificName)) {
if (isTRUE(obs_table$occurrenceStatus_Snail[i] == "present" || obs_table$occurrenceStatus_Archean[i] ==
"present" || obs_table$occurrenceStatus_Urashima[i] == "present") ==TRUE ) {
obs_table$occurenceStatus_overall[i] <- "present"
} else
obs_table$occurenceStatus_overall[i] <- "absent"
}
cols(collapsed)
colnames()
colnames(collapsed)
collapsed<-initial_cleaning #establish a dataframe to hold collapsed data
collapsed<-collapsed %>%
group_by(AphiaID) %>% #group by AphiaID
arrange(final.category.used.for.abundance, .by_group=TRUE) #arrange first by AphiaID, then by final.category.used.for.abundance
collapsed<-initial_cleaning #establish a dataframe to hold collapsed data
colnames(collapsed)
collapsed<-collapsed_cleaning %>% #new df called collaped
group_by(final.category.used.for.abundance) %>% #group by final.category.used.for.abundance
summarize( #collapse by group
AphiaID = AphiaID, #aphiaID stays the same
scientificNameID = scientificNameID,
Phylum = Phylum,
taxonRank = taxonRank,
taxonRank_AphiaID_match = taxonRank_AphiaID_match,
final.category.used.for.abundance = final.category.used.for.abundance,
original.category..gastropods.organized.by.size..Bethany.s.benthic.checklist.gastropods.by.genus. = paste(original.category..gastropods.organized.by.size..Bethany.s.benthic.checklist.gastropods.by.genus., collapse=", "), #paste all entries of this column into one box; trying not to lose data
associatedSequences = paste(associatedSequences, collapse=", "), #paste all sequencies for a given group in sequences column of resulting row
associatedMedia = paste(associatedMedia, collapse=", "), #paste all media for a given group in media column of resulting row
identificationRemarks = paste(identificationRemarks, collapse=", "), #same w ID remarks
#for counts/totals columns, using paste bc of rows with letters in them, hopefully can come back and add/otherwise fix this in another for loop or something
X1.Snail.300 = paste(X1.Snail.300,collapse="+"),
X1.Snail.63 = paste(X1.Snail.63,collapse="+"),
X1.Snail.ship = paste(X1.Snail.ship,collapse="+"),
X2.Snail.300 = paste(X2.Snail.300,collapse="+"),
X2.Snail.63 = paste(X2.Snail.63,collapse="+"),
X2.Snail.ship = paste(X2.Snail.ship,collapse="+"),
X3.Archean.300 = paste(X3.Archean.300,collapse="+"),
X3.Archean.63 = paste(X3.Archean.63,collapse="+"),
X3.Archean.ship = paste(X3.Archean.ship,collapse="+"),
X4.Archean.300 = paste(X4.Archean.300,collapse="+"),
X4.Archean.63 = paste(X4.Archean.63,collapse="+"),
X4.Archean.ship = paste(X4.Archean.ship,collapse="+"),
X5.Urashima.300 = paste(X5.Urashima.300,collapse="+"),
X5.Urashima.63 = paste(X5.Urashima63,collapse="+"),
X5.Archean.ship = paste(X5.Archean.ship,collapse="+"),
X6.Urashima.300 = paste(X6.Urashima.300,collapse="+"),
X6.Urashima.63 = paste(X6.Urashima63,collapse="+"),
X6.Archean.ship = paste(X6.Archean.ship,collapse="+"),
X1.Snail.total = paste(X1.Snail.total, collapse="+"),
X2.Snail.total = paste(X2.Snail.total, collapse="+"),
X3.Archean.total = paste(X3.Archean.total, collapse="+"),
X4.Archean.total = paste(X4.Archean.total, collapse="+"),
X5.Urashima.total = paste(X5.Urashima.total, collapse="+"),
X6.Urashima.total = paste(X6.Urashima.total, collapse="+")
)
collapse_cleaning<-initial_cleaning #establish a dataframe to hold collapsed data
#reorganize for aesthetics
collapsed_cleaning<-collapsed_cleaning %>%
group_by(AphiaID) %>% #group by AphiaID
arrange(final.category.used.for.abundance, .by_group=TRUE) #arrange first by AphiaID, then by final.category.used.for.abundance
package_list<-c(#"taxize", #NOTE WITH TAXIZE: get_wormsid and similar functions that retrieve from WoRMS using scientific name search marine taxa only UNLESS you install the development version
"worrms",
"tidyr",
"dplyr",
"tibble")
#install.packages("taxize") #install packages as necessary
#install.packages("tidyr") # "
#install.packages("dplyr") # "
#install.packages("tibble") # "
for (i in package_list) {
library(i, character.only = TRUE)
}
#development version of taxize
# install.packages("remotes")
# remotes::install_github("ropensci/taxize")
libary(taxize)
library(taxize)
package_list<-c(#"taxize", #NOTE WITH TAXIZE: get_wormsid and similar functions that retrieve from WoRMS using scientific name search marine taxa only UNLESS you install the development version
"worrms",
"tidyr",
"dplyr",
"tibble")
#install.packages("taxize") #install packages as necessary
#install.packages("tidyr") # "
#install.packages("dplyr") # "
#install.packages("tibble") # "
for (i in package_list) {
library(i, character.only = TRUE)
}
#development version of taxize
# install.packages("remotes")
# remotes::install_github("ropensci/taxize")
library(taxize)
setwd("C:/Users/Dale/Desktop") #wherever the csv is saved
initial<-read.csv("Mariana_2010_pumps_WORKING-COPY - larval_counts.csv") #csv name
initial_cleaning<-initial #create a duplicate of initial called initial_df so that if I screw something up later, I still have the original df untouched
#save various columns as class character
columns<-colnames(initial_cleaning) #make list of column names to check which ones should be characters
char_cols<-columns[1:9] #columns 1 thru 9 contain character inputs; rest are totals
for (i in 1:length(char_cols)){ #convert columns that should be characters to class "character"
initial_cleaning[,i]<-as.character(initial_cleaning[,i])
}
##add column to hold AphiaID
initial_cleaning<-add_column(initial_cleaning,AphiaID="",.after="Group")
##add column to hold taxon rank check
initial_cleaning<-add_column(initial_cleaning,taxonRank_AphiaID_match="",.after="taxonRank")
##finding AphiaID from column scientificName
for (i in 1:length(initial_cleaning$scientificName)) {
initial_cleaning$AphiaID[i]<-wm_name2id(initial_cleaning$scientificName[i])
}
#make AphiaID numeric, for later calls
initial_cleaning$AphiaID<-as.numeric(initial_cleaning$AphiaID)
#check if AphiaID/scientificName match given taxon
##initial run: lots of FALSEes b/c upper/lowercase mismatch; worms all lowercase; changing taxonRank to all lower
initial_cleaning$taxonRank<-tolower(initial_cleaning$taxonRank)
##for each value in taxonRank, see if equal to the rank of the AphiaID; place this true/false as value for taxonRank_AphiaID_match column
for (i in 1:length(initial_cleaning$scientificName)) {
initial_cleaning$taxonRank_AphiaID_match[i]<-isTRUE(initial_cleaning$taxonRank[i] == as.character(tax_rank(initial_cleaning$AphiaID[i], db="worms")))
}
#get phylum from AphiaID, for manual validation
##add column to hold phylum
initial_cleaning<-add_column(initial_cleaning,Phylum="",.before="scientificName")
##
for (i in 1:length(initial_cleaning$AphiaID)){
tree<-classification(initial_cleaning$AphiaID[i], db='worms') #get taxonomic stuff from WoRMS based on AphiaID
df_tree<-as.data.frame(tree[[1]]) #take just the name/rank/id portion, as a df, from classification() output
if (length(df_tree$name[(which(df_tree$rank=="Phylum"))])==0) { #some are only to Animalia, and so have no value for Phylum in the output from classification(); put "NA" here. This if/else helps prevent the for loop from throwing an error and stopping when it encounters a classification() output that has no phylum
initial_cleaning$Phylum[i]<-"NA"
#paste(c("error row:",i," AphiaID:",initial_cleaning$AphiaID[i]), sep="")
}
else
initial_cleaning$Phylum[i]<-df_tree$name[which(df_tree$rank == "Phylum")] #set name of the phylum to initial_cleaning$Phylum value
}
#using LSID as scientificNameID
#LSID is just a consistent 'preamble' URI, plus AphiaID
for (i in 1:length(initial_cleaning$AphiaID)) {
initial_cleaning$scientificNameID[i]<-paste("urn:lsid:marinespecies.org:taxname:",initial_cleaning$AphiaID[i],sep="")
}
#initial_cleaning_2<-initial_cleaning #another backup incase of mistakes
#initial_cleaning<-initial_cleaning_2 #load backup
#check column names, to see names of which we'd like to keep/drop
#colnames(initial_cleaning)
#remove undesired names
initial_cleaning<-initial_cleaning[,-c(1)] #subset initial_cleaning without undesired columns; just removing "Group" column
#rename some (but not all!) of the non-DarwinCore-compliant column names
initial_cleaning <- initial_cleaning %>%
rename(
associatedSequences = Specimen.ID.for.those.with.genetic.sequences, #specimenID =/= associated sequence, but presumably a link to the associated sequence can be gotten pretty easily from the specimen ID
associatedMedia = Photograph.for.those.without.genetic.seq..bc.photo.submitted.with.genetic.seq., #photo name, needs static reference
identificationRemarks = Genetic.Notes, #probably the closest fit of catagory names for notes on genetic match
X1.Snail.total = X1.Total, #just to make it clearer which total this refers to
X2.Snail.total = X2.Total, #also to make it clearer
X3.Archean.total = X3.Total,
X4.Archean.total = X4.Total,
X5.Urashima.total = X5.Total,
X6.Urashima.total = X6.Total
)
#create occurrence columns, 1 for each Snail site; can condense into 1, but for now keep separate
obs_table<-add_column(initial_cleaning,	occurrenceStatus_X1.Snail="",occurrenceStatus_X2.Snail="",occurrenceStatus_Snail="",occurrenceStatus_X3.Archean="",occurrenceStatus_X4.Archean="",occurrenceStatus_Archean="",occurrenceStatus_X5.Urashima="",occurrenceStatus_X6.Urashima="",occurrenceStatus_Urashima="",occurenceStatus_overall="",.after="identificationRemarks")
#fill in presence/absence based on totals column>0 or counts column presence/absence/NA
##separate for loops for moorings 1 and 2, just for clarity/simplicity
##data is such that either the "total" column has a value and counts columns lack the letters p/a/n, OR the "total" column is NA and counts columns have p, a, or n
#presence/absence for mooring 1 at Snail Vent
for (i in 1:length(obs_table$scientificName)) {
obsStatus<-paste(obs_table$X1.Snail.300[i],obs_table$X1.Snail.63[i],obs_table$X1.Snail.ship[i],sep="") #create a value to hold all the entries for individual counts (aka step 1 for dealing with columns with a mix of character and numeric values)
if (isTRUE(grepl("p", obsStatus))==TRUE) { #if the compilation of counts for the site contains the letter p, occurrence= "present"
obs_table$occurrenceStatus_X1.Snail[i]<-"present" #set occurrence at Snail 1 to "present" if "p" anywhere in that row's
} else if (isTRUE(as.numeric(obs_table$X1.Snail.total[i])>0) ==TRUE) { #if "p" is not in the counts columns, but the total is >0
obs_table$occurrenceStatus_X1.Snail[i]<-"present" #set occurrence at Snail 1 to "present"
} else
obs_table$occurrenceStatus_X1.Snail[i]<- "absent" #for all others (no 'p' in counts, and total is not >0), mark as absent
}
#presence/absence for mooring 2 at Snail Vent
for (i in 1:length(obs_table$scientificName)) {
obsStatus<-paste(obs_table$X2.Snail.300[i],obs_table$X2.Snail.63[i],obs_table$X2.Snail.ship[i],sep="")
if (isTRUE(grepl("p", obsStatus))==TRUE) {
obs_table$occurrenceStatus_X2.Snail[i]<-"present"
} else if (isTRUE(as.numeric(obs_table$X2.Snail.total[i])>0) ==TRUE) {
obs_table$occurrenceStatus_X2.Snail[i]<-"present"
} else
obs_table$occurrenceStatus_X2.Snail[i]<- "absent"
}
#overall at Snail vent
for (i in 1:length(obs_table$scientificName)) {
if (isTRUE(obs_table$occurrenceStatus_X1.Snail[i] == "absent" && obs_table$occurrenceStatus_X2.Snail[i] == "absent") == TRUE) { #if both moorings at snail are "absent" for the row,
obs_table$occurrenceStatus_Snail[i]<-"absent" #make snail vent "absent"
} else
obs_table$occurrenceStatus_Snail[i] <- "present" #otherwise (present/absent or present/present) make overall snail vent "present"
}
#presence/absence for mooring 3 at Archean
for (i in 1:length(obs_table$scientificName)) {
obsStatus<-paste(obs_table$X3.Archean.300[i],obs_table$X3.Archean.63[i],obs_table$X3.Archean.ship[i],sep="")
if (isTRUE(grepl("p", obsStatus))==TRUE) {
obs_table$occurrenceStatus_X3.Archean[i]<-"present"
} else if (isTRUE(as.numeric(obs_table$X3.Archean.total[i])>0) ==TRUE) {
obs_table$occurrenceStatus_X3.Archean[i]<-"present"
} else
obs_table$occurrenceStatus_X3.Archean[i]<- "absent"
}
#presence/absence for mooring 4 at Archean
for (i in 1:length(obs_table$scientificName)) {
obsStatus<-paste(obs_table$X4.Archean.300[i],obs_table$X4.Archean.63[i],obs_table$X4.Archean.ship[i],sep="")
if (isTRUE(grepl("p", obsStatus))==TRUE) {
obs_table$occurrenceStatus_X4.Archean[i]<-"present"
} else if (isTRUE(as.numeric(obs_table$X4.Archean.total[i])>0) ==TRUE) {
obs_table$occurrenceStatus_X4.Archean[i]<-"present"
} else
obs_table$occurrenceStatus_X4.Archean[i]<- "absent"
}
#overall at Archean (if present/present or absent/absent, look for "present")
for (i in 1:length(obs_table$scientificName)) {
if (isTRUE(obs_table$occurrenceStatus_X3.Archean[i] == "absent" && obs_table$occurrenceStatus_X4.Archean[i] == "absent") == TRUE) {
obs_table$occurrenceStatus_Archean[i]<-"absent"
} else
obs_table$occurrenceStatus_Archean[i] <- "present" #otherwise (present/absent) is "present" in overall column
}
#presence/absence for mooring 3 at Urashima
for (i in 1:length(obs_table$scientificName)) {
obsStatus<-paste(obs_table$X5.Urashima.300[i],obs_table$X5.Urashima.63[i],obs_table$X5.Urashima.ship[i],sep="")
if (isTRUE(grepl("p", obsStatus))==TRUE) {
obs_table$occurrenceStatus_X5.Urashima[i]<-"present"
} else if (isTRUE(as.numeric(obs_table$X5.Urashima.total[i])>0) ==TRUE) {
obs_table$occurrenceStatus_X5.Urashima[i]<-"present"
} else
obs_table$occurrenceStatus_X5.Urashima[i]<- "absent"
}
#presence/absence for mooring 4 at Urashima
for (i in 1:length(obs_table$scientificName)) {
obsStatus<-paste(obs_table$X6.Urashima.300[i],obs_table$X6.Urashima.63[i],obs_table$X6.Urashima.ship[i],sep="")
if (isTRUE(grepl("p", obsStatus))==TRUE) {
obs_table$occurrenceStatus_X6.Urashima[i]<-"present"
} else if (isTRUE(as.numeric(obs_table$X6.Urashima.total[i])>0) ==TRUE) {
obs_table$occurrenceStatus_X6.Urashima[i]<-"present"
} else
obs_table$occurrenceStatus_X6.Urashima[i]<- "absent"
}
#overall at Urashima (if present/present or absent/absent, look for "present")
for (i in 1:length(obs_table$scientificName)) {
if (isTRUE(obs_table$occurrenceStatus_X5.Urashima[i] == "absent" && obs_table$occurrenceStatus_X6.Urashima[i] == "absent") == TRUE) {
obs_table$occurrenceStatus_Urashima[i]<-"absent"
} else
obs_table$occurrenceStatus_Urashima[i] <- "present" #otherwise (present/absent) is "present" in overall column
}
#if any of the site columns are present, make overall present; otherwise, make absent
##originall, was if all are abesnt, make absent, otherwise, make present; this version accounts for blanks, making overall absent if there's an absent or two and a blank or two
for (i in 1:length(obs_table$scientificName)) {
if (isTRUE(obs_table$occurrenceStatus_Snail[i] == "present" || obs_table$occurrenceStatus_Archean[i] ==
"present" || obs_table$occurrenceStatus_Urashima[i] == "present") ==TRUE ) {
obs_table$occurenceStatus_overall[i] <- "present"
} else
obs_table$occurenceStatus_overall[i] <- "absent"
}
collapsed_cleaning<-initial_cleaning #establish a dataframe to hold collapsed data
#reorganize for aesthetics
collapsed_cleaning<-collapsed_cleaning %>%
group_by(AphiaID) %>% #group by AphiaID
arrange(final.category.used.for.abundance, .by_group=TRUE) #arrange first by AphiaID, then by final.category.used.for.abundance
collapsed<-collapsed_cleaning %>% #new df called collaped
group_by(final.category.used.for.abundance) %>% #group by final.category.used.for.abundance
summarize( #collapse by group
AphiaID = AphiaID, #aphiaID stays the same
scientificNameID = scientificNameID,
Phylum = Phylum,
taxonRank = taxonRank,
taxonRank_AphiaID_match = taxonRank_AphiaID_match,
final.category.used.for.abundance = final.category.used.for.abundance,
original.category..gastropods.organized.by.size..Bethany.s.benthic.checklist.gastropods.by.genus. = paste(original.category..gastropods.organized.by.size..Bethany.s.benthic.checklist.gastropods.by.genus., collapse=", "), #paste all entries of this column into one box; trying not to lose data
associatedSequences = paste(associatedSequences, collapse=", "), #paste all sequencies for a given group in sequences column of resulting row
associatedMedia = paste(associatedMedia, collapse=", "), #paste all media for a given group in media column of resulting row
identificationRemarks = paste(identificationRemarks, collapse=", "), #same w ID remarks
#for counts/totals columns, using paste bc of rows with letters in them, hopefully can come back and add/otherwise fix this in another for loop or something
X1.Snail.300 = paste(X1.Snail.300,collapse="+"),
X1.Snail.63 = paste(X1.Snail.63,collapse="+"),
X1.Snail.ship = paste(X1.Snail.ship,collapse="+"),
X2.Snail.300 = paste(X2.Snail.300,collapse="+"),
X2.Snail.63 = paste(X2.Snail.63,collapse="+"),
X2.Snail.ship = paste(X2.Snail.ship,collapse="+"),
X3.Archean.300 = paste(X3.Archean.300,collapse="+"),
X3.Archean.63 = paste(X3.Archean.63,collapse="+"),
X3.Archean.ship = paste(X3.Archean.ship,collapse="+"),
X4.Archean.300 = paste(X4.Archean.300,collapse="+"),
X4.Archean.63 = paste(X4.Archean.63,collapse="+"),
X4.Archean.ship = paste(X4.Archean.ship,collapse="+"),
X5.Urashima.300 = paste(X5.Urashima.300,collapse="+"),
X5.Urashima.63 = paste(X5.Urashima63,collapse="+"),
X5.Archean.ship = paste(X5.Archean.ship,collapse="+"),
X6.Urashima.300 = paste(X6.Urashima.300,collapse="+"),
X6.Urashima.63 = paste(X6.Urashima63,collapse="+"),
X6.Archean.ship = paste(X6.Archean.ship,collapse="+"),
X1.Snail.total = paste(X1.Snail.total, collapse="+"),
X2.Snail.total = paste(X2.Snail.total, collapse="+"),
X3.Archean.total = paste(X3.Archean.total, collapse="+"),
X4.Archean.total = paste(X4.Archean.total, collapse="+"),
X5.Urashima.total = paste(X5.Urashima.total, collapse="+"),
X6.Urashima.total = paste(X6.Urashima.total, collapse="+")
)
install.packages("assertthat.rdb")
